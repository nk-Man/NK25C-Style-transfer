// mainwindow.cpp
#include "mainwindow.h"
#include "ui_mainwindow.h"      // make sure this is generated by uic
#include <QFileDialog>
#include <QMouseEvent>
#include <opencv2/opencv.hpp>

MainWindow::MainWindow(QWidget* parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->generateButton->setEnabled(false);

    ui->contentLabel->setCursor(Qt::PointingHandCursor);
    ui->styleLabel->setCursor(Qt::PointingHandCursor);
    ui->contentLabel->installEventFilter(this);
    ui->styleLabel->installEventFilter(this);
}

MainWindow::~MainWindow() {
    delete ui;
}

bool MainWindow::eventFilter(QObject* obj, QEvent* ev) {
    if (ev->type() == QEvent::MouseButtonRelease) {
        if (obj == ui->contentLabel) on_contentLabel_clicked();
        else if (obj == ui->styleLabel) on_styleLabel_clicked();
        return true;
    }
    return QMainWindow::eventFilter(obj, ev);
}

void MainWindow::on_contentLabel_clicked() {
    QString path = QFileDialog::getOpenFileName(this, "Select Content Image", {}, "Images (*.png *.jpg *.bmp)");
    if (path.isEmpty()) return;
    contentImage.load(path);
    ui->contentLabel->setPixmap(QPixmap::fromImage(contentImage)
                                    .scaled(ui->contentLabel->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
    if (!styleImage.isNull()) ui->generateButton->setEnabled(true);
}

void MainWindow::on_styleLabel_clicked() {
    QString path = QFileDialog::getOpenFileName(this, "Select Style Image", {}, "Images (*.png *.jpg *.bmp)");
    if (path.isEmpty()) return;
    styleImage.load(path);
    ui->styleLabel->setPixmap(QPixmap::fromImage(styleImage)
                                  .scaled(ui->styleLabel->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
    if (!contentImage.isNull()) ui->generateButton->setEnabled(true);
}

void MainWindow::on_generateButton_clicked() {
    model.loadModel("style_transfer.pt");
    cv::Mat out = model.infer(qImageToCvMat(contentImage), qImageToCvMat(styleImage));
    QImage result = cvMatToQImage(out);
    ui->contentLabel->setPixmap(QPixmap::fromImage(result)
                                    .scaled(ui->contentLabel->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
}

QImage MainWindow::cvMatToQImage(const cv::Mat& mat) {
    cv::Mat rgb;
    cv::cvtColor(mat, rgb, cv::COLOR_BGR2RGB);
    return QImage(rgb.data, rgb.cols, rgb.rows, rgb.step, QImage::Format_RGB888).copy();
}

cv::Mat MainWindow::qImageToCvMat(const QImage& img) {
    QImage tmp = img.convertToFormat(QImage::Format_RGB888);
    cv::Mat mat(img.height(), img.width(), CV_8UC3,
                const_cast<uchar*>(tmp.bits()), tmp.bytesPerLine());
    cv::cvtColor(mat, mat, cv::COLOR_RGB2BGR);
    return mat.clone();
}
